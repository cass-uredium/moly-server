name: CI

on:
  push:
    branches:
      - main
      - dev
    paths-ignore:
      - "**/*.md"
  pull_request:
    paths-ignore:
      - "**/*.md"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  WASMEDGE_VERSION: "0.14.1"

jobs:
  build_ubuntu:
    name: build-ubuntu
    strategy:
      matrix:
        os: [ubuntu-22.04]
        arch: [x86_64]
        rust: [stable]
    runs-on: ${{ matrix.os }}
    env:
      BUILD_LABEL: moly-server-${{ matrix.os }}-${{ matrix.arch }}
      DIST_DIR: ${{ github.workspace }}/dist/moly-server-${{ matrix.os }}-${{ matrix.arch }}
      RUST_TARGET: ${{ matrix.arch }}-unknown-linux-gnu
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install WasmEdge (${{ env.WASMEDGE_VERSION }})
        run: |
          curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install_v2.sh | bash -s -- --version="$WASMEDGE_VERSION"
          source "$HOME"/.wasmedge/env
          echo "WASMEDGE_DIR=$HOME/.wasmedge" >> "$GITHUB_ENV"

      - name: Install Rust toolchain (${{ matrix.rust }})
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ env.RUST_TARGET }}

      - name: Rust cache
        if: ${{ github.head_ref != 'main' && github.head_ref != 'dev' }}
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ env.BUILD_LABEL }}

      - name: cargo build
        run: |
          cargo build --locked --release --bin=moly-server --target="$RUST_TARGET" --target-dir=target --features reqwest/native-tls-vendored

      - name: Set up build/dist directories
        run: |
          rm -rf "$DIST_DIR"
          mkdir -p "$DIST_DIR"

      - name: Copy WasmEdge libraries
        run: |
          shopt -s extglob
          mkdir -p "$DIST_DIR"/lib
          cp "$WASMEDGE_DIR"/lib/libwasmedge.so.+([^.]) "$DIST_DIR"/lib/
          cp "$WASMEDGE_DIR"/plugin/libwasmedgePluginWasiNN.so "$DIST_DIR"/lib/

      - name: Copy binary artifacts
        run: |
          mkdir -p "$DIST_DIR"/bin
          cp "target/$RUST_TARGET/release/moly-server" "$DIST_DIR"/bin/

      - name: Copy resource files
        run: |
          cp LICENSE "$DIST_DIR"/

      - name: Strip unneeded binary symbols
        run: |
          strip \
              --strip-unneeded \
              --remove-section=.comment \
              --remove-section=.note \
              "$DIST_DIR"/bin/moly-server

      - name: Patch binary with relative rpath
        run: |
          patchelf --set-rpath '$ORIGIN/../lib' "$DIST_DIR"/bin/moly-server

      - name: Upload dist archive
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BUILD_LABEL }}
          path: ${{ env.DIST_DIR }}

  build_macos:
    name: build-macos
    strategy:
      matrix:
        os: [macos-14]
        arch: [x86_64, aarch64]
        rust: [stable]
    runs-on: ${{ matrix.os }}
    env:
      BUILD_LABEL: moly-server-darwin-${{ matrix.arch }}
      DIST_DIR: ${{ github.workspace }}/dist/moly-server-darwin-${{ matrix.arch }}
      RUST_TARGET: ${{ matrix.arch }}-apple-darwin
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install WasmEdge (${{ env.WASMEDGE_VERSION }})
        run: |
          curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install_v2.sh | bash -s -- --version="$WASMEDGE_VERSION" --arch=${{ matrix.arch }}
          source "$HOME"/.wasmedge/env
          echo "WASMEDGE_DIR=$HOME/.wasmedge" >> "$GITHUB_ENV"

      - name: Install Rust toolchain (${{ matrix.rust }})
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          targets: ${{ env.RUST_TARGET }}

      - name: Rust cache
        if: ${{ github.head_ref != 'main' && github.head_ref != 'dev' }}
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ env.BUILD_LABEL }}

      - name: cargo build
        run: |
          cargo build --locked --release --bin=moly-server --target="$RUST_TARGET" --target-dir=target

      - name: Set up build/dist directories
        run: |
          rm -rf "$DIST_DIR"
          mkdir -p "$DIST_DIR"

      - name: Copy WasmEdge libraries
        run: |
          shopt -s extglob
          mkdir -p "$DIST_DIR"/lib
          cp "$WASMEDGE_DIR"/lib/libwasmedge.+([^.]).dylib "$DIST_DIR"/lib/
          cp "$WASMEDGE_DIR"/plugin/libwasmedgePluginWasiNN.dylib "$DIST_DIR"/lib/

      - name: Copy binary artifacts
        run: |
          mkdir -p "$DIST_DIR"/bin
          cp "target/$RUST_TARGET/release/moly-server" "$DIST_DIR"/bin/

      - name: Copy resource files
        run: |
          cp LICENSE "$DIST_DIR"/

      - name: Patch binary with relative rpath
        run: |
          install_name_tool -add_rpath '@executable_path/../lib' "$DIST_DIR"/bin/moly-server

      - name: Upload dist archive
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BUILD_LABEL }}
          path: ${{ env.DIST_DIR }}

  build_windows:
    name: build-windows
    strategy:
      matrix:
        os: [windows-2022]
        rust: [stable]
    runs-on: ${{ matrix.os }}
    env:
      BUILD_LABEL: moly-server-windows-x86_64
      DIST_DIR: ${{ github.workspace }}\dist\moly-server-windows-x86_64
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install WasmEdge (${{ env.WASMEDGE_VERSION }})
        run: |
          $wasmedge_release_url = "https://github.com/WasmEdge/WasmEdge/releases/download/$env:WASMEDGE_VERSION"

          $wasmedge_dist = "WasmEdge-$env:WASMEDGE_VERSION-windows" ## directory is `WasmEdge-X.Y.Z-Windows`--case insensitivity matters
          $wasi_nn_dist = "WasmEdge-plugin-wasi_nn-ggml-noavx-$env:WASMEDGE_VERSION-windows_x86_64"

          $ProgressPreference = 'SilentlyContinue'  ## makes downloads much faster

          Invoke-WebRequest -Uri "$wasmedge_release_url/${wasmedge_dist}.zip" -OutFile "$env:TEMP\${wasmedge_dist}.zip"
          Expand-Archive -Force -LiteralPath "$env:TEMP\${wasmedge_dist}.zip" -DestinationPath "${{ github.workspace }}"

          Invoke-WebRequest -Uri "$wasmedge_release_url/${wasi_nn_dist}.zip" -OutFile "$env:TEMP\${wasi_nn_dist}.zip"
          Expand-Archive -Force -LiteralPath "$env:TEMP\${wasi_nn_dist}.zip" -DestinationPath "$env:TEMP"
          Copy-Item -Recurse -Force -Path "$env:TEMP\$wasi_nn_dist\lib\wasmedge\*" -Destination "${{ github.workspace }}\$wasmedge_dist\lib"

          $ProgressPreference = 'Continue' ## restore default progress bars

          echo "WASMEDGE_DIR=${{ github.workspace }}\$wasmedge_dist" | Out-File -FilePath "$env:GITHUB_ENV" -Encoding utf8 -Append

      - name: Set up Windows 10 SDK
        uses: GuillaumeFalourd/setup-windows10-sdk-action@v2
        with:
          sdk-version: 20348

      - name: Install Rust toolchain (${{ matrix.rust }})
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Rust cache
        if: ${{ github.head_ref != 'main' && github.head_ref != 'dev' }}
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: ${{ env.BUILD_LABEL }}

      - name: cargo build
        run: |
          cargo build --locked --release --bin=moly-server

      - name: Set up build/dist directories
        shell: bash
        run: |
          rm -rf "$DIST_DIR"
          mkdir -p "$DIST_DIR"

      - name: Copy WasmEdge libraries
        shell: bash
        run: |
          mkdir -p "$DIST_DIR"/lib
          cp "$WASMEDGE_DIR"/bin/wasmedge.dll "$DIST_DIR"/
          cp "$WASMEDGE_DIR"/lib/wasmedge.lib "$DIST_DIR"/
          cp "$WASMEDGE_DIR"/lib/wasmedgePluginWasiNN.dll "$DIST_DIR"/

      - name: Copy binary artifacts
        shell: bash
        run: |
          mkdir -p "$DIST_DIR"/bin
          cp target/release/moly-server "$DIST_DIR"/

      - name: Copy resource files
        shell: bash
        run: |
          cp LICENSE "$DIST_DIR"/

      - name: Upload dist archive
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BUILD_LABEL }}
          path: ${{ env.DIST_DIR }}
